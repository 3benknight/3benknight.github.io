{"ast":null,"code":"import { useMemo as e, useCallback as n, createElement as o, Fragment as i, forwardRef as t, useRef as r, useState as a, useEffect as d } from \"react\";\nimport { useValueFormatter as s, usePropertyAccessor as l, useMotionConfig as u, Container as c, useDimensions as h, CartesianMarkers as f, SvgWrapper as v, ResponsiveWrapper as m, useTheme as g, getRelativeCursor as p, isCursorInRect as y } from \"@nivo/core\";\nimport { Grid as x, Axes as M, renderGridLinesToCanvas as S, renderAxesToCanvas as b } from \"@nivo/axes\";\nimport { BoxLegendSvg as w, renderLegendToCanvas as I } from \"@nivo/legends\";\nimport { useOrdinalColorScale as k } from \"@nivo/colors\";\nimport { computeXYScalesForSeries as z } from \"@nivo/scales\";\nimport { useAnnotations as E, Annotation as C, renderAnnotationsToCanvas as L } from \"@nivo/annotations\";\nimport W from \"lodash/get\";\nimport F from \"lodash/isString\";\nimport X from \"lodash/isNumber\";\nimport Y from \"lodash/isPlainObject\";\nimport { scaleLinear as B } from \"d3-scale\";\nimport { animated as G, useTransition as H } from \"@react-spring/web\";\nimport { jsx as R, Fragment as T } from \"react/jsx-runtime\";\nimport { BasicTooltip as V, useTooltip as j } from \"@nivo/tooltip\";\nimport { Mesh as O, useVoronoiMesh as D, renderVoronoiToCanvas as N, renderVoronoiCellToCanvas as P } from \"@nivo/voronoi\";\nfunction A() {\n  return A = Object.assign ? Object.assign.bind() : function (e) {\n    for (var n = 1; n < arguments.length; n++) {\n      var o = arguments[n];\n      for (var i in o) Object.prototype.hasOwnProperty.call(o, i) && (e[i] = o[i]);\n    }\n    return e;\n  }, A.apply(this, arguments);\n}\nfunction U(e, n) {\n  if (null == e) return {};\n  var o,\n    i,\n    t = {},\n    r = Object.keys(e);\n  for (i = 0; i < r.length; i++) o = r[i], n.indexOf(o) >= 0 || (t[o] = e[o]);\n  return t;\n}\nvar q = function (e) {\n    if (\"function\" == typeof e) return e;\n    if (X(e)) return function () {\n      return e;\n    };\n    if (function (e) {\n      return Y(e);\n    }(e)) {\n      if (!F(e.key)) throw new Error(\"symbolSize is invalid, key should be a string pointing to the property to use to determine node size\");\n      if (!Array.isArray(e.values) || 2 !== e.values.length) throw new Error(\"symbolSize is invalid, values spec should be an array containing two values, min and max\");\n      if (!Array.isArray(e.sizes) || 2 !== e.sizes.length) throw new Error(\"symbolSize is invalid, sizes spec should be an array containing two values, min and max\");\n      var n = B().domain([e.values[0], e.values[1]]).range([e.sizes[0], e.sizes[1]]);\n      return function (o) {\n        return n(W(o, e.key));\n      };\n    }\n    throw new Error(\"nodeSize is invalid, it should be either a function, a number or an object\");\n  },\n  J = function (n) {\n    var o,\n      i = n.data,\n      t = n.xScaleSpec,\n      r = n.xFormat,\n      a = n.yScaleSpec,\n      d = n.yFormat,\n      u = n.width,\n      c = n.height,\n      h = n.nodeId,\n      f = n.nodeSize,\n      v = n.colors,\n      m = e(function () {\n        return z(i, t, a, u, c);\n      }, [i, t, a, u, c]),\n      g = m.series,\n      p = m.xScale,\n      y = m.yScale,\n      x = s(r),\n      M = s(d),\n      S = l(h),\n      b = e(function () {\n        return function (e) {\n          var n = e.series,\n            o = e.formatX,\n            i = e.formatY,\n            t = e.getNodeId,\n            r = [];\n          return n.forEach(function (e) {\n            e.data.forEach(function (n, a) {\n              var d = {\n                index: r.length,\n                serieIndex: a,\n                serieId: e.id,\n                x: n.position.x,\n                xValue: n.data.x,\n                formattedX: o(n.data.x),\n                y: n.position.y,\n                yValue: n.data.y,\n                formattedY: i(n.data.y),\n                data: n.data\n              };\n              r.push(A({}, d, {\n                id: t(d)\n              }));\n            });\n          }), r;\n        }({\n          series: g,\n          formatX: x,\n          formatY: M,\n          getNodeId: S\n        });\n      }, [g, x, M, S]),\n      w = e(function () {\n        return q(o);\n      }, [o = f]),\n      I = k(v, \"serieId\");\n    return {\n      xScale: p,\n      yScale: y,\n      nodes: e(function () {\n        return b.map(function (e) {\n          return A({}, e, {\n            size: w(e),\n            color: I({\n              serieId: e.serieId\n            })\n          });\n        });\n      }, [b, w, I]),\n      legendData: e(function () {\n        return g.map(function (e) {\n          return {\n            id: e.id,\n            label: e.id,\n            color: I({\n              serieId: e.id\n            })\n          };\n        });\n      }, [g, I])\n    };\n  },\n  K = function (e, n) {\n    return E({\n      data: e,\n      annotations: n,\n      getPosition: function (e) {\n        return {\n          x: e.x,\n          y: e.y\n        };\n      },\n      getDimensions: function (e) {\n        return {\n          size: e.size,\n          width: e.size,\n          height: e.size\n        };\n      }\n    });\n  },\n  Q = function (e) {\n    return e / 2;\n  },\n  Z = {\n    xScale: {\n      type: \"linear\",\n      min: 0,\n      max: \"auto\"\n    },\n    yScale: {\n      type: \"linear\",\n      min: 0,\n      max: \"auto\"\n    },\n    enableGridX: !0,\n    enableGridY: !0,\n    axisBottom: {},\n    axisLeft: {},\n    nodeId: function (e) {\n      return e.serieId + \".\" + e.index;\n    },\n    nodeSize: 9,\n    nodeComponent: function (e) {\n      var o = e.node,\n        i = e.style,\n        t = e.blendMode,\n        r = e.isInteractive,\n        a = e.onMouseEnter,\n        d = e.onMouseMove,\n        s = e.onMouseLeave,\n        l = e.onClick,\n        u = n(function (e) {\n          return null == a ? void 0 : a(o, e);\n        }, [o, a]),\n        c = n(function (e) {\n          return null == d ? void 0 : d(o, e);\n        }, [o, d]),\n        h = n(function (e) {\n          return null == s ? void 0 : s(o, e);\n        }, [o, s]),\n        f = n(function (e) {\n          return null == l ? void 0 : l(o, e);\n        }, [o, l]);\n      return R(G.circle, {\n        cx: i.x,\n        cy: i.y,\n        r: i.size.to(Q),\n        fill: i.color,\n        style: {\n          mixBlendMode: t\n        },\n        onMouseEnter: r ? u : void 0,\n        onMouseMove: r ? c : void 0,\n        onMouseLeave: r ? h : void 0,\n        onClick: r ? f : void 0\n      });\n    },\n    colors: {\n      scheme: \"nivo\"\n    },\n    isInteractive: !0,\n    debugMesh: !1,\n    tooltip: function (e) {\n      var n = e.node;\n      return R(V, {\n        id: n.serieId,\n        value: \"x: \" + n.formattedX + \", y: \" + n.formattedY,\n        enableChip: !0,\n        color: n.color\n      });\n    },\n    markers: [],\n    legends: [],\n    annotations: []\n  },\n  $ = A({}, Z, {\n    blendMode: \"normal\",\n    layers: [\"grid\", \"axes\", \"nodes\", \"markers\", \"mesh\", \"legends\", \"annotations\"],\n    role: \"img\",\n    useMesh: !0,\n    animate: !0,\n    motionConfig: \"default\"\n  }),\n  _ = A({}, Z, {\n    layers: [\"grid\", \"axes\", \"nodes\", \"mesh\", \"legends\", \"annotations\"],\n    pixelRatio: \"undefined\" != typeof window && window.devicePixelRatio || 1,\n    renderNode: function (e, n) {\n      e.beginPath(), e.arc(n.x, n.y, n.size / 2, 0, 2 * Math.PI), e.fillStyle = n.color, e.fill();\n    }\n  }),\n  ee = function (e) {\n    var n = e.nodes,\n      o = e.annotations,\n      i = K(n, o);\n    return R(T, {\n      children: i.map(function (e, n) {\n        return R(C, A({}, e), n);\n      })\n    });\n  },\n  ne = function (e) {\n    return e.id;\n  },\n  oe = function (e) {\n    return {\n      x: e.x,\n      y: e.y,\n      size: e.size,\n      color: e.color\n    };\n  },\n  ie = function (e) {\n    return {\n      x: e.x,\n      y: e.y,\n      size: 0,\n      color: e.color\n    };\n  },\n  te = function (e) {\n    var i = e.nodes,\n      t = e.nodeComponent,\n      r = e.isInteractive,\n      a = e.onMouseEnter,\n      d = e.onMouseMove,\n      s = e.onMouseLeave,\n      l = e.onClick,\n      c = e.tooltip,\n      h = e.blendMode,\n      f = u(),\n      v = f.animate,\n      m = f.config,\n      g = H(i, {\n        keys: ne,\n        from: oe,\n        enter: oe,\n        update: oe,\n        leave: ie,\n        config: m,\n        immediate: !v\n      }),\n      p = j(),\n      y = p.showTooltipFromEvent,\n      x = p.hideTooltip,\n      M = n(function (e, n) {\n        y(o(c, {\n          node: e\n        }), n), null == a || a(e, n);\n      }, [c, y, a]),\n      S = n(function (e, n) {\n        y(o(c, {\n          node: e\n        }), n), null == d || d(e, n);\n      }, [c, y, d]),\n      b = n(function (e, n) {\n        x(), null == s || s(e, n);\n      }, [x, s]),\n      w = n(function (e, n) {\n        return null == l ? void 0 : l(e, n);\n      }, [l]);\n    return R(T, {\n      children: g(function (e, n) {\n        return o(t, {\n          node: n,\n          style: e,\n          blendMode: h,\n          isInteractive: r,\n          onMouseEnter: r ? M : void 0,\n          onMouseMove: r ? S : void 0,\n          onMouseLeave: r ? b : void 0,\n          onClick: r ? w : void 0\n        });\n      })\n    });\n  },\n  re = function (e) {\n    var i = e.nodes,\n      t = e.width,\n      r = e.height,\n      a = e.onMouseEnter,\n      d = e.onMouseMove,\n      s = e.onMouseLeave,\n      l = e.onClick,\n      u = e.tooltip,\n      c = e.debug,\n      h = j(),\n      f = h.showTooltipFromEvent,\n      v = h.hideTooltip,\n      m = n(function (e, n) {\n        f(o(u, {\n          node: e\n        }), n), a && a(e, n);\n      }, [f, u, a]),\n      g = n(function (e, n) {\n        f(o(u, {\n          node: e\n        }), n), d && d(e, n);\n      }, [f, u, d]),\n      p = n(function (e, n) {\n        v(), s && s(e, n);\n      }, [v, s]),\n      y = n(function (e, n) {\n        l && l(e, n);\n      }, [l]);\n    return R(O, {\n      nodes: i,\n      width: t,\n      height: r,\n      onMouseEnter: m,\n      onMouseMove: g,\n      onMouseLeave: p,\n      onClick: y,\n      debug: c\n    });\n  },\n  ae = [\"isInteractive\", \"animate\", \"motionConfig\", \"theme\", \"renderWrapper\"],\n  de = function (n) {\n    var t = n.data,\n      r = n.xScale,\n      a = void 0 === r ? $.xScale : r,\n      d = n.xFormat,\n      s = n.yScale,\n      l = void 0 === s ? $.yScale : s,\n      u = n.yFormat,\n      c = n.width,\n      m = n.height,\n      g = n.margin,\n      p = n.layers,\n      y = void 0 === p ? $.layers : p,\n      S = n.colors,\n      b = void 0 === S ? $.colors : S,\n      I = n.blendMode,\n      k = void 0 === I ? $.blendMode : I,\n      z = n.nodeId,\n      E = void 0 === z ? $.nodeId : z,\n      C = n.nodeSize,\n      L = void 0 === C ? $.nodeSize : C,\n      W = n.nodeComponent,\n      F = void 0 === W ? $.nodeComponent : W,\n      X = n.enableGridX,\n      Y = void 0 === X ? $.enableGridX : X,\n      B = n.enableGridY,\n      G = void 0 === B ? $.enableGridY : B,\n      H = n.gridXValues,\n      T = n.gridYValues,\n      V = n.axisTop,\n      j = n.axisRight,\n      O = n.axisBottom,\n      D = void 0 === O ? $.axisBottom : O,\n      N = n.axisLeft,\n      P = void 0 === N ? $.axisLeft : N,\n      U = n.annotations,\n      q = void 0 === U ? $.annotations : U,\n      K = n.isInteractive,\n      Q = void 0 === K ? $.isInteractive : K,\n      Z = n.useMesh,\n      _ = void 0 === Z ? $.useMesh : Z,\n      ne = n.debugMesh,\n      oe = void 0 === ne ? $.debugMesh : ne,\n      ie = n.onMouseEnter,\n      ae = n.onMouseMove,\n      de = n.onMouseLeave,\n      se = n.onClick,\n      le = n.tooltip,\n      ue = void 0 === le ? $.tooltip : le,\n      ce = n.markers,\n      he = void 0 === ce ? $.markers : ce,\n      fe = n.legends,\n      ve = void 0 === fe ? $.legends : fe,\n      me = n.role,\n      ge = void 0 === me ? $.role : me,\n      pe = n.ariaLabel,\n      ye = n.ariaLabelledBy,\n      xe = n.ariaDescribedBy,\n      Me = h(c, m, g),\n      Se = Me.margin,\n      be = Me.innerWidth,\n      we = Me.innerHeight,\n      Ie = Me.outerWidth,\n      ke = Me.outerHeight,\n      ze = J({\n        data: t,\n        xScaleSpec: a,\n        xFormat: d,\n        yScaleSpec: l,\n        yFormat: u,\n        width: be,\n        height: we,\n        nodeId: E,\n        nodeSize: L,\n        colors: b\n      }),\n      Ee = ze.xScale,\n      Ce = ze.yScale,\n      Le = ze.nodes,\n      We = ze.legendData,\n      Fe = e(function () {\n        return {\n          xScale: Ee,\n          yScale: Ce,\n          nodes: Le,\n          margin: Se,\n          innerWidth: be,\n          innerHeight: we,\n          outerWidth: Ie,\n          outerHeight: ke\n        };\n      }, [Ee, Ce, Le, Se, be, we, Ie, ke]),\n      Xe = {\n        grid: null,\n        axes: null,\n        nodes: null,\n        markers: null,\n        mesh: null,\n        annotations: null,\n        legends: null\n      };\n    return y.includes(\"grid\") && (Xe.grid = R(x, {\n      width: be,\n      height: we,\n      xScale: Y ? Ee : null,\n      yScale: G ? Ce : null,\n      xValues: H,\n      yValues: T\n    }, \"grid\")), y.includes(\"axes\") && (Xe.axes = R(M, {\n      xScale: Ee,\n      yScale: Ce,\n      width: be,\n      height: we,\n      top: V,\n      right: j,\n      bottom: D,\n      left: P\n    }, \"axes\")), y.includes(\"nodes\") && (Xe.nodes = R(te, {\n      nodes: Le,\n      nodeComponent: F,\n      isInteractive: Q,\n      tooltip: ue,\n      blendMode: k,\n      onMouseEnter: ie,\n      onMouseMove: ae,\n      onMouseLeave: de,\n      onClick: se\n    }, \"nodes\")), y.includes(\"markers\") && (Xe.markers = R(f, {\n      markers: he,\n      width: be,\n      height: we,\n      xScale: Ee,\n      yScale: Ce\n    }, \"markers\")), y.includes(\"mesh\") && Q && _ && (Xe.mesh = R(re, {\n      nodes: Le,\n      width: be,\n      height: we,\n      onMouseEnter: ie,\n      onMouseMove: ae,\n      onMouseLeave: de,\n      onClick: se,\n      tooltip: ue,\n      debug: oe\n    }, \"mesh\")), y.includes(\"annotations\") && (Xe.annotations = R(ee, {\n      nodes: Le,\n      annotations: q\n    }, \"annotations\")), y.includes(\"legends\") && (Xe.legends = ve.map(function (e, n) {\n      return R(w, A({}, e, {\n        containerWidth: be,\n        containerHeight: we,\n        data: We\n      }), n);\n    })), R(v, {\n      width: Ie,\n      height: ke,\n      margin: Se,\n      role: ge,\n      ariaLabel: pe,\n      ariaLabelledBy: ye,\n      ariaDescribedBy: xe,\n      children: y.map(function (e, n) {\n        if (\"string\" == typeof e && void 0 !== Xe[e]) return Xe[e];\n        if (\"function\" == typeof e) return R(i, {\n          children: o(e, Fe)\n        }, n);\n        throw new Error(\"Unknown layer (\" + e + \")\");\n      })\n    });\n  },\n  se = function (e) {\n    var n = e.isInteractive,\n      o = void 0 === n ? $.isInteractive : n,\n      i = e.animate,\n      t = void 0 === i ? $.animate : i,\n      r = e.motionConfig,\n      a = void 0 === r ? $.motionConfig : r,\n      d = e.theme,\n      s = e.renderWrapper,\n      l = U(e, ae);\n    return R(c, {\n      animate: t,\n      isInteractive: o,\n      motionConfig: a,\n      renderWrapper: s,\n      theme: d,\n      children: R(de, A({\n        isInteractive: o\n      }, l))\n    });\n  },\n  le = function (e) {\n    return R(m, {\n      children: function (n) {\n        var o = n.width,\n          i = n.height;\n        return R(se, A({\n          width: o,\n          height: i\n        }, e));\n      }\n    });\n  },\n  ue = [\"isInteractive\", \"renderWrapper\", \"theme\"],\n  ce = function (i) {\n    var t = i.data,\n      s = i.xScale,\n      l = void 0 === s ? _.xScale : s,\n      u = i.xFormat,\n      c = i.yScale,\n      f = void 0 === c ? _.yScale : c,\n      v = i.yFormat,\n      m = i.width,\n      x = i.height,\n      M = i.margin,\n      w = i.pixelRatio,\n      k = void 0 === w ? _.pixelRatio : w,\n      z = i.layers,\n      E = void 0 === z ? _.layers : z,\n      C = i.colors,\n      W = void 0 === C ? _.colors : C,\n      F = i.nodeId,\n      X = void 0 === F ? $.nodeId : F,\n      Y = i.nodeSize,\n      B = void 0 === Y ? _.nodeSize : Y,\n      G = i.renderNode,\n      H = void 0 === G ? _.renderNode : G,\n      T = i.enableGridX,\n      V = void 0 === T ? _.enableGridX : T,\n      O = i.gridXValues,\n      U = i.enableGridY,\n      q = void 0 === U ? _.enableGridY : U,\n      Q = i.gridYValues,\n      Z = i.axisTop,\n      ee = i.axisRight,\n      ne = i.axisBottom,\n      oe = void 0 === ne ? _.axisBottom : ne,\n      ie = i.axisLeft,\n      te = void 0 === ie ? _.axisLeft : ie,\n      re = i.annotations,\n      ae = void 0 === re ? _.annotations : re,\n      de = i.isInteractive,\n      se = void 0 === de ? _.isInteractive : de,\n      le = i.debugMesh,\n      ue = void 0 === le ? _.debugMesh : le,\n      ce = i.onMouseEnter,\n      he = i.onMouseMove,\n      fe = i.onMouseLeave,\n      ve = i.onClick,\n      me = i.tooltip,\n      ge = void 0 === me ? _.tooltip : me,\n      pe = i.legends,\n      ye = void 0 === pe ? _.legends : pe,\n      xe = i.canvasRef,\n      Me = r(null),\n      Se = g(),\n      be = a(null),\n      we = be[0],\n      Ie = be[1],\n      ke = h(m, x, M),\n      ze = ke.margin,\n      Ee = ke.innerWidth,\n      Ce = ke.innerHeight,\n      Le = ke.outerWidth,\n      We = ke.outerHeight,\n      Fe = J({\n        data: t,\n        xScaleSpec: l,\n        xFormat: u,\n        yScaleSpec: f,\n        yFormat: v,\n        width: Ee,\n        height: Ce,\n        nodeId: X,\n        nodeSize: B,\n        colors: W\n      }),\n      Xe = Fe.xScale,\n      Ye = Fe.yScale,\n      Be = Fe.nodes,\n      Ge = Fe.legendData,\n      He = K(Be, ae),\n      Re = D({\n        points: Be,\n        width: Ee,\n        height: Ce,\n        debug: ue\n      }),\n      Te = Re.delaunay,\n      Ve = Re.voronoi,\n      je = e(function () {\n        return {\n          xScale: Xe,\n          yScale: Ye,\n          nodes: Be,\n          margin: ze,\n          innerWidth: Ee,\n          innerHeight: Ce,\n          outerWidth: Le,\n          outerHeight: We\n        };\n      }, [Xe, Ye, Be, ze, Ee, Ce, Le, We]);\n    d(function () {\n      if (Me.current) {\n        Me.current.width = Le * k, Me.current.height = We * k;\n        var e = Me.current.getContext(\"2d\");\n        e.scale(k, k), e.fillStyle = Se.background, e.fillRect(0, 0, Le, We), e.translate(ze.left, ze.top), E.forEach(function (n) {\n          if (\"grid\" === n) e.lineWidth = Se.grid.line.strokeWidth, e.strokeStyle = Se.grid.line.stroke, V && S(e, {\n            width: Ee,\n            height: Ce,\n            scale: Xe,\n            axis: \"x\",\n            values: O\n          }), q && S(e, {\n            width: Ee,\n            height: Ce,\n            scale: Ye,\n            axis: \"y\",\n            values: Q\n          });else if (\"annotations\" === n) L(e, {\n            annotations: He,\n            theme: Se\n          });else if (\"axes\" === n) b(e, {\n            xScale: Xe,\n            yScale: Ye,\n            width: Ee,\n            height: Ce,\n            top: Z,\n            right: ee,\n            bottom: oe,\n            left: te,\n            theme: Se\n          });else if (\"nodes\" === n) Be.forEach(function (n) {\n            H(e, n);\n          });else if (\"mesh\" === n) ue && (N(e, Ve), we && P(e, Ve, we.index));else if (\"legends\" === n) ye.forEach(function (n) {\n            I(e, A({}, n, {\n              data: Ge,\n              containerWidth: Ee,\n              containerHeight: Ce,\n              theme: Se\n            }));\n          });else {\n            if (\"function\" != typeof n) throw new Error(\"Invalid layer: \" + n);\n            n(e, je);\n          }\n        });\n      }\n    }, [Me, Ee, Ce, Le, We, ze.top, ze.left, k, H, E, je, Se, Xe, Ye, Be, V, q, Z, ee, oe, te, ye, Ge, ue, Ve, we, He]);\n    var Oe = j(),\n      De = Oe.showTooltipFromEvent,\n      Ne = Oe.hideTooltip,\n      Pe = n(function (e) {\n        var n = p(Me.current, e),\n          o = n[0],\n          i = n[1];\n        if (!y(ze.left, ze.top, Ee, Ce, o, i)) return null;\n        var t = Te.find(o - ze.left, i - ze.top);\n        return Be[t];\n      }, [Me, ze, Ee, Ce, Te]),\n      Ae = n(function (e) {\n        var n = Pe(e);\n        Ie(n), n ? (De(o(ge, {\n          node: n\n        }), e), we && we.id !== n.id && (fe && fe(we, e), ce && ce(n, e)), we || ce && ce(n, e), he && he(n, e)) : (Ne(), we && fe && fe(we, e));\n      }, [Pe, we, Ie, De, Ne, ge, ce, he, fe]),\n      Ue = n(function (e) {\n        Ne(), Ie(null), we && fe && fe(we, e);\n      }, [Ne, we, Ie, fe]),\n      qe = n(function (e) {\n        if (ve) {\n          var n = Pe(e);\n          n && ve(n, e);\n        }\n      }, [Pe, ve]);\n    return R(\"canvas\", {\n      ref: function (e) {\n        Me.current = e, xe && \"current\" in xe && (xe.current = e);\n      },\n      width: Le * k,\n      height: We * k,\n      style: {\n        width: Le,\n        height: We,\n        cursor: se ? \"auto\" : \"normal\"\n      },\n      onMouseEnter: se ? Ae : void 0,\n      onMouseMove: se ? Ae : void 0,\n      onMouseLeave: se ? Ue : void 0,\n      onClick: se ? qe : void 0\n    });\n  },\n  he = t(function (e, n) {\n    var o = e.isInteractive,\n      i = e.renderWrapper,\n      t = e.theme,\n      r = U(e, ue);\n    return R(c, {\n      isInteractive: o,\n      renderWrapper: i,\n      theme: t,\n      animate: !1,\n      children: R(ce, A({}, r, {\n        canvasRef: n\n      }))\n    });\n  }),\n  fe = t(function (e, n) {\n    return R(m, {\n      children: function (o) {\n        var i = o.width,\n          t = o.height;\n        return R(he, A({\n          width: i,\n          height: t\n        }, e, {\n          ref: n\n        }));\n      }\n    });\n  });\nexport { le as ResponsiveScatterPlot, fe as ResponsiveScatterPlotCanvas, se as ScatterPlot, he as ScatterPlotCanvas, _ as canvasDefaultProps, Z as commonDefaultProps, $ as svgDefaultProps, J as useScatterPlot, K as useScatterPlotAnnotations };","map":{"version":3,"names":["q","getNodeSizeGenerator","e","X","Y","F","key","Error","Array","isArray","values","length","sizes","n","B","domain","range","o","W","J","useScatterPlot","i","data","t","xScaleSpec","r","xFormat","a","yScaleSpec","d","yFormat","u","width","c","height","h","nodeId","f","nodeSize","v","colors","m","z","g","series","p","xScale","y","yScale","x","s","M","S","l","b","formatX","formatY","getNodeId","forEach","index","serieIndex","serieId","id","position","xValue","formattedX","yValue","formattedY","push","A","w","I","k","nodes","map","size","color","legendData","label","K","useScatterPlotAnnotations","E","annotations","getPosition","getDimensions","Q","interpolateRadius","Z","type","min","max","enableGridX","enableGridY","axisBottom","axisLeft","nodeComponent","node","style","blendMode","isInteractive","onMouseEnter","onMouseMove","onMouseLeave","onClick","R","G","circle","cx","cy","to","fill","mixBlendMode","scheme","debugMesh","tooltip","V","value","enableChip","markers","legends","$","layers","role","useMesh","animate","motionConfig","_","pixelRatio","window","devicePixelRatio","renderNode","beginPath","arc","Math","PI","fillStyle","ee","ScatterPlotAnnotations","T","children","C","ne","getNodeKey","oe","regularTransition","ie","leaveTransition","te","Nodes","config","H","keys","from","enter","update","leave","immediate","j","showTooltipFromEvent","hideTooltip","re","Mesh","debug","O","ae","de","InnerScatterPlot","margin","L","gridXValues","gridYValues","axisTop","axisRight","D","N","P","U","se","le","ue","ce","he","fe","ve","me","ge","pe","ariaLabel","ye","ariaLabelledBy","xe","ariaDescribedBy","Me","Se","be","innerWidth","we","innerHeight","Ie","outerWidth","ke","outerHeight","ze","Ee","Ce","Le","We","Fe","Xe","grid","axes","mesh","includes","xValues","yValues","top","right","bottom","left","containerWidth","containerHeight","ScatterPlot","theme","renderWrapper","ResponsiveScatterPlot","InnerScatterPlotCanvas","canvasRef","Ye","Be","Ge","He","Re","points","Te","delaunay","Ve","voronoi","je","current","getContext","scale","background","fillRect","translate","lineWidth","line","strokeWidth","strokeStyle","stroke","axis","Oe","De","Ne","Pe","find","Ae","Ue","qe","ref","cursor","ResponsiveScatterPlotCanvas","ScatterPlotCanvas","canvasDefaultProps","commonDefaultProps","svgDefaultProps"],"sources":["/Users/benjaminknight/Documents/UMD/CMSC734/nivo-charts/node_modules/@nivo/scatterplot/src/compute.ts","/Users/benjaminknight/Documents/UMD/CMSC734/nivo-charts/node_modules/@nivo/scatterplot/src/hooks.ts","/Users/benjaminknight/Documents/UMD/CMSC734/nivo-charts/node_modules/@nivo/scatterplot/src/Node.tsx","/Users/benjaminknight/Documents/UMD/CMSC734/nivo-charts/node_modules/@nivo/scatterplot/src/props.tsx","/Users/benjaminknight/Documents/UMD/CMSC734/nivo-charts/node_modules/@nivo/scatterplot/src/Tooltip.tsx","/Users/benjaminknight/Documents/UMD/CMSC734/nivo-charts/node_modules/@nivo/scatterplot/src/ScatterPlotAnnotations.tsx","/Users/benjaminknight/Documents/UMD/CMSC734/nivo-charts/node_modules/@nivo/scatterplot/src/Nodes.tsx","/Users/benjaminknight/Documents/UMD/CMSC734/nivo-charts/node_modules/@nivo/scatterplot/src/Mesh.tsx","/Users/benjaminknight/Documents/UMD/CMSC734/nivo-charts/node_modules/@nivo/scatterplot/src/ScatterPlot.tsx","/Users/benjaminknight/Documents/UMD/CMSC734/nivo-charts/node_modules/@nivo/scatterplot/src/ResponsiveScatterPlot.tsx","/Users/benjaminknight/Documents/UMD/CMSC734/nivo-charts/node_modules/@nivo/scatterplot/src/ScatterPlotCanvas.tsx","/Users/benjaminknight/Documents/UMD/CMSC734/nivo-charts/node_modules/@nivo/scatterplot/src/ResponsiveScatterPlotCanvas.tsx"],"sourcesContent":["import get from 'lodash/get'\nimport isString from 'lodash/isString'\nimport isNumber from 'lodash/isNumber'\nimport isPlainObject from 'lodash/isPlainObject'\nimport { scaleLinear } from 'd3-scale'\nimport { ComputedSerie } from '@nivo/scales'\nimport {\n    ScatterPlotCommonProps,\n    ScatterPlotDatum,\n    ScatterPlotNodeData,\n    ScatterPlotNodeDynamicSizeSpec,\n} from './types'\n\nconst isDynamicSizeSpec = <RawDatum extends ScatterPlotDatum>(\n    size: ScatterPlotCommonProps<RawDatum>['nodeSize']\n): size is ScatterPlotNodeDynamicSizeSpec => isPlainObject(size)\n\nexport const getNodeSizeGenerator = <RawDatum extends ScatterPlotDatum>(\n    size: ScatterPlotCommonProps<RawDatum>['nodeSize']\n) => {\n    if (typeof size === 'function') return size\n    if (isNumber(size)) return () => size\n    if (isDynamicSizeSpec<RawDatum>(size)) {\n        if (!isString(size.key)) {\n            throw new Error(\n                'symbolSize is invalid, key should be a string pointing to the property to use to determine node size'\n            )\n        }\n        if (!Array.isArray(size.values) || size.values.length !== 2) {\n            throw new Error(\n                'symbolSize is invalid, values spec should be an array containing two values, min and max'\n            )\n        }\n        if (!Array.isArray(size.sizes) || size.sizes.length !== 2) {\n            throw new Error(\n                'symbolSize is invalid, sizes spec should be an array containing two values, min and max'\n            )\n        }\n\n        const sizeScale = scaleLinear()\n            .domain([size.values[0], size.values[1]])\n            .range([size.sizes[0], size.sizes[1]])\n\n        return (datum: Omit<ScatterPlotNodeData<RawDatum>, 'size' | 'color'>) =>\n            sizeScale(get(datum, size.key))\n    }\n\n    throw new Error('nodeSize is invalid, it should be either a function, a number or an object')\n}\n\nexport const computePoints = <RawDatum extends ScatterPlotDatum>({\n    series,\n    formatX,\n    formatY,\n    getNodeId,\n}: {\n    series: ComputedSerie<{ id: string | number }, RawDatum>[]\n    formatX: (value: RawDatum['x']) => string | number\n    formatY: (value: RawDatum['x']) => string | number\n    getNodeId: (d: Omit<ScatterPlotNodeData<RawDatum>, 'id' | 'size' | 'color'>) => string\n}): Omit<ScatterPlotNodeData<RawDatum>, 'size' | 'color'>[] => {\n    const points: Omit<ScatterPlotNodeData<RawDatum>, 'size' | 'color'>[] = []\n\n    series.forEach(serie => {\n        serie.data.forEach((d, serieIndex) => {\n            const point: Omit<ScatterPlotNodeData<RawDatum>, 'id' | 'size' | 'color'> = {\n                index: points.length,\n                serieIndex,\n                serieId: serie.id,\n                x: d.position.x as number,\n                xValue: d.data.x,\n                formattedX: formatX(d.data.x),\n                y: d.position.y as number,\n                yValue: d.data.y,\n                formattedY: formatY(d.data.y),\n                data: d.data,\n            }\n\n            points.push({\n                ...point,\n                id: getNodeId(point),\n            })\n        })\n    })\n\n    return points\n}\n","import { useMemo } from 'react'\nimport { useValueFormatter, usePropertyAccessor } from '@nivo/core'\nimport { useOrdinalColorScale } from '@nivo/colors'\nimport { computeXYScalesForSeries } from '@nivo/scales'\nimport { useAnnotations } from '@nivo/annotations'\nimport { computePoints, getNodeSizeGenerator } from './compute'\nimport {\n    ScatterPlotCommonProps,\n    ScatterPlotDataProps,\n    ScatterPlotDatum,\n    ScatterPlotNodeData,\n} from './types'\n\nconst useNodeSize = <RawDatum extends ScatterPlotDatum>(\n    size: ScatterPlotCommonProps<RawDatum>['nodeSize']\n) => useMemo(() => getNodeSizeGenerator<RawDatum>(size), [size])\n\nexport const useScatterPlot = <RawDatum extends ScatterPlotDatum>({\n    data,\n    xScaleSpec,\n    xFormat,\n    yScaleSpec,\n    yFormat,\n    width,\n    height,\n    nodeId,\n    nodeSize,\n    colors,\n}: {\n    data: ScatterPlotDataProps<RawDatum>['data']\n    xScaleSpec: ScatterPlotCommonProps<RawDatum>['xScale']\n    xFormat?: ScatterPlotCommonProps<RawDatum>['xFormat']\n    yScaleSpec: ScatterPlotCommonProps<RawDatum>['yScale']\n    yFormat?: ScatterPlotCommonProps<RawDatum>['yFormat']\n    width: number\n    height: number\n    nodeId: ScatterPlotCommonProps<RawDatum>['nodeId']\n    nodeSize: ScatterPlotCommonProps<RawDatum>['nodeSize']\n    colors: ScatterPlotCommonProps<RawDatum>['colors']\n}) => {\n    const { series, xScale, yScale } = useMemo(\n        () =>\n            computeXYScalesForSeries<{ id: string | number }, RawDatum>(\n                data,\n                xScaleSpec,\n                yScaleSpec,\n                width,\n                height\n            ),\n        [data, xScaleSpec, yScaleSpec, width, height]\n    )\n\n    const formatX = useValueFormatter(xFormat)\n    const formatY = useValueFormatter(yFormat)\n    const getNodeId = usePropertyAccessor(nodeId)\n    const rawNodes = useMemo(\n        () => computePoints<RawDatum>({ series, formatX, formatY, getNodeId }),\n        [series, formatX, formatY, getNodeId]\n    )\n\n    const getNodeSize = useNodeSize<RawDatum>(nodeSize)\n\n    const getColor = useOrdinalColorScale(colors, 'serieId')\n\n    const nodes: ScatterPlotNodeData<RawDatum>[] = useMemo(\n        () =>\n            rawNodes.map(rawNode => ({\n                ...rawNode,\n                size: getNodeSize(rawNode),\n                color: getColor({ serieId: rawNode.serieId }),\n            })),\n        [rawNodes, getNodeSize, getColor]\n    )\n\n    const legendData = useMemo(\n        () =>\n            series.map(serie => ({\n                id: serie.id,\n                label: serie.id,\n                color: getColor({ serieId: serie.id }),\n            })),\n        [series, getColor]\n    )\n\n    return {\n        xScale,\n        yScale,\n        nodes,\n        legendData,\n    }\n}\n\nexport const useScatterPlotAnnotations = <RawDatum extends ScatterPlotDatum>(\n    items: ScatterPlotNodeData<RawDatum>[],\n    annotations: ScatterPlotCommonProps<RawDatum>['annotations']\n) =>\n    useAnnotations<ScatterPlotNodeData<RawDatum>>({\n        data: items,\n        annotations,\n        getPosition: (node: ScatterPlotNodeData<RawDatum>) => ({\n            x: node.x,\n            y: node.y,\n        }),\n        getDimensions: (node: ScatterPlotNodeData<RawDatum>) => ({\n            size: node.size,\n            width: node.size,\n            height: node.size,\n        }),\n    })\n","import { useCallback, MouseEvent } from 'react'\nimport { animated } from '@react-spring/web'\nimport { ScatterPlotDatum, ScatterPlotNodeProps } from './types'\n\nconst interpolateRadius = (size: number) => size / 2\n\nexport const Node = <RawDatum extends ScatterPlotDatum>({\n    node,\n    style,\n    blendMode,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n}: ScatterPlotNodeProps<RawDatum>) => {\n    const handleMouseEnter = useCallback(\n        (event: MouseEvent<SVGCircleElement>) => onMouseEnter?.(node, event),\n        [node, onMouseEnter]\n    )\n    const handleMouseMove = useCallback(\n        (event: MouseEvent<SVGCircleElement>) => onMouseMove?.(node, event),\n        [node, onMouseMove]\n    )\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<SVGCircleElement>) => onMouseLeave?.(node, event),\n        [node, onMouseLeave]\n    )\n    const handleClick = useCallback(\n        (event: MouseEvent<SVGCircleElement>) => onClick?.(node, event),\n        [node, onClick]\n    )\n\n    return (\n        <animated.circle\n            cx={style.x}\n            cy={style.y}\n            r={style.size.to(interpolateRadius)}\n            fill={style.color}\n            style={{ mixBlendMode: blendMode }}\n            onMouseEnter={isInteractive ? handleMouseEnter : undefined}\n            onMouseMove={isInteractive ? handleMouseMove : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n","import { CssMixBlendMode } from '@nivo/core'\nimport { Node } from './Node'\nimport { Tooltip } from './Tooltip'\nimport {\n    ScatterPlotCommonProps,\n    ScatterPlotDatum,\n    ScatterPlotLayerId,\n    ScatterPlotNodeData,\n} from './types'\n\nexport const commonDefaultProps = {\n    xScale: {\n        type: 'linear',\n        min: 0,\n        max: 'auto',\n    } as ScatterPlotCommonProps<ScatterPlotDatum>['xScale'],\n    yScale: {\n        type: 'linear',\n        min: 0,\n        max: 'auto',\n    } as ScatterPlotCommonProps<ScatterPlotDatum>['yScale'],\n\n    enableGridX: true,\n    enableGridY: true,\n    axisBottom: {},\n    axisLeft: {},\n\n    nodeId: (({ serieId, index }) =>\n        `${serieId}.${index}`) as ScatterPlotCommonProps<ScatterPlotDatum>['nodeId'],\n    nodeSize: 9,\n    nodeComponent: Node,\n\n    colors: { scheme: 'nivo' } as ScatterPlotCommonProps<ScatterPlotDatum>['colors'],\n\n    isInteractive: true,\n    debugMesh: false,\n\n    tooltip: Tooltip,\n\n    markers: [],\n\n    legends: [],\n\n    annotations: [],\n}\n\nexport const svgDefaultProps = {\n    ...commonDefaultProps,\n    blendMode: 'normal' as CssMixBlendMode,\n    layers: [\n        'grid',\n        'axes',\n        'nodes',\n        'markers',\n        'mesh',\n        'legends',\n        'annotations',\n    ] as ScatterPlotLayerId[],\n    role: 'img',\n    useMesh: true,\n    animate: true,\n    motionConfig: 'default',\n}\n\nexport const canvasDefaultProps = {\n    ...commonDefaultProps,\n    layers: ['grid', 'axes', 'nodes', 'mesh', 'legends', 'annotations'] as ScatterPlotLayerId[],\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n    renderNode: (ctx: CanvasRenderingContext2D, node: ScatterPlotNodeData<ScatterPlotDatum>) => {\n        ctx.beginPath()\n        ctx.arc(node.x, node.y, node.size / 2, 0, 2 * Math.PI)\n        ctx.fillStyle = node.color\n        ctx.fill()\n    },\n}\n","import { BasicTooltip } from '@nivo/tooltip'\nimport { ScatterPlotTooltipProps, ScatterPlotDatum } from './types'\n\nexport const Tooltip = <RawDatum extends ScatterPlotDatum>({\n    node,\n}: ScatterPlotTooltipProps<RawDatum>) => (\n    <BasicTooltip\n        id={node.serieId}\n        value={`x: ${node.formattedX}, y: ${node.formattedY}`}\n        enableChip={true}\n        color={node.color}\n    />\n)\n","import { Annotation } from '@nivo/annotations'\nimport { useScatterPlotAnnotations } from './hooks'\nimport { ScatterPlotCommonProps, ScatterPlotDatum, ScatterPlotNodeData } from './types'\n\ninterface ScatterPlotAnnotationsProps<RawDatum extends ScatterPlotDatum> {\n    nodes: ScatterPlotNodeData<RawDatum>[]\n    annotations: ScatterPlotCommonProps<RawDatum>['annotations']\n}\n\nexport const ScatterPlotAnnotations = <RawDatum extends ScatterPlotDatum>({\n    nodes,\n    annotations,\n}: ScatterPlotAnnotationsProps<RawDatum>) => {\n    const boundAnnotations = useScatterPlotAnnotations<RawDatum>(nodes, annotations)\n\n    return (\n        <>\n            {boundAnnotations.map((annotation, i) => (\n                <Annotation key={i} {...annotation} />\n            ))}\n        </>\n    )\n}\n","import { createElement, useCallback, MouseEvent } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { CssMixBlendMode, useMotionConfig } from '@nivo/core'\nimport { useTooltip } from '@nivo/tooltip'\nimport {\n    ScatterPlotCommonProps,\n    ScatterPlotDatum,\n    ScatterPlotNode,\n    ScatterPlotNodeData,\n} from './types'\n\ninterface NodesProps<RawDatum extends ScatterPlotDatum> {\n    nodes: ScatterPlotNodeData<RawDatum>[]\n    nodeComponent: ScatterPlotNode<RawDatum>\n    isInteractive: boolean\n    onMouseEnter?: ScatterPlotCommonProps<RawDatum>['onMouseEnter']\n    onMouseMove?: ScatterPlotCommonProps<RawDatum>['onMouseMove']\n    onMouseLeave?: ScatterPlotCommonProps<RawDatum>['onMouseLeave']\n    onClick?: ScatterPlotCommonProps<RawDatum>['onClick']\n    tooltip: ScatterPlotCommonProps<RawDatum>['tooltip']\n    blendMode: CssMixBlendMode\n}\n\nconst getNodeKey = <RawDatum extends ScatterPlotDatum>(node: ScatterPlotNodeData<RawDatum>) =>\n    node.id\nconst regularTransition = <RawDatum extends ScatterPlotDatum>(\n    node: ScatterPlotNodeData<RawDatum>\n) => ({\n    x: node.x,\n    y: node.y,\n    size: node.size,\n    color: node.color,\n})\nconst leaveTransition = <RawDatum extends ScatterPlotDatum>(\n    node: ScatterPlotNodeData<RawDatum>\n) => ({\n    x: node.x,\n    y: node.y,\n    size: 0,\n    color: node.color,\n})\n\nexport const Nodes = <RawDatum extends ScatterPlotDatum>({\n    nodes,\n    nodeComponent,\n    isInteractive,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    blendMode,\n}: NodesProps<RawDatum>) => {\n    const { animate, config: springConfig } = useMotionConfig()\n    const transition = useTransition<\n        ScatterPlotNodeData<RawDatum>,\n        {\n            x: number\n            y: number\n            size: number\n            color: string\n        }\n    >(nodes, {\n        keys: getNodeKey,\n        from: regularTransition,\n        enter: regularTransition,\n        update: regularTransition,\n        leave: leaveTransition,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n    const handleMouseEnter = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseEnter?.(node, event)\n        },\n        [tooltip, showTooltipFromEvent, onMouseEnter]\n    )\n    const handleMouseMove = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseMove?.(node, event)\n        },\n        [tooltip, showTooltipFromEvent, onMouseMove]\n    )\n    const handleMouseLeave = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => {\n            hideTooltip()\n            onMouseLeave?.(node, event)\n        },\n        [hideTooltip, onMouseLeave]\n    )\n    const handleClick = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => onClick?.(node, event),\n        [onClick]\n    )\n\n    return (\n        <>\n            {transition((style, node) =>\n                createElement(nodeComponent, {\n                    node,\n                    style,\n                    blendMode,\n                    isInteractive,\n                    onMouseEnter: isInteractive ? handleMouseEnter : undefined,\n                    onMouseMove: isInteractive ? handleMouseMove : undefined,\n                    onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n                    onClick: isInteractive ? handleClick : undefined,\n                })\n            )}\n        </>\n    )\n}\n","import { createElement, useCallback, MouseEvent } from 'react'\nimport { useTooltip } from '@nivo/tooltip'\nimport { Mesh as BaseMesh } from '@nivo/voronoi'\nimport { ScatterPlotCommonProps, ScatterPlotDatum, ScatterPlotNodeData } from './types'\n\ninterface MeshProps<RawDatum extends ScatterPlotDatum> {\n    nodes: ScatterPlotNodeData<RawDatum>[]\n    width: number\n    height: number\n    onMouseEnter?: ScatterPlotCommonProps<RawDatum>['onMouseEnter']\n    onMouseMove?: ScatterPlotCommonProps<RawDatum>['onMouseMove']\n    onMouseLeave?: ScatterPlotCommonProps<RawDatum>['onMouseLeave']\n    onClick?: ScatterPlotCommonProps<RawDatum>['onClick']\n    tooltip: ScatterPlotCommonProps<RawDatum>['tooltip']\n    debug: boolean\n}\n\nexport const Mesh = <RawDatum extends ScatterPlotDatum>({\n    nodes,\n    width,\n    height,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    debug,\n}: MeshProps<RawDatum>) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseEnter && onMouseEnter(node, event)\n        },\n        [showTooltipFromEvent, tooltip, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => {\n            showTooltipFromEvent(createElement(tooltip, { node }), event)\n            onMouseMove && onMouseMove(node, event)\n        },\n        [showTooltipFromEvent, tooltip, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => {\n            hideTooltip()\n            onMouseLeave && onMouseLeave(node, event)\n        },\n        [hideTooltip, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        (node: ScatterPlotNodeData<RawDatum>, event: MouseEvent) => {\n            onClick && onClick(node, event)\n        },\n        [onClick]\n    )\n\n    return (\n        <BaseMesh\n            nodes={nodes}\n            width={width}\n            height={height}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n            debug={debug}\n        />\n    )\n}\n","import { createElement, Fragment, ReactNode, useMemo } from 'react'\nimport { SvgWrapper, Container, useDimensions, CartesianMarkers } from '@nivo/core'\nimport { Axes, Grid } from '@nivo/axes'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { useScatterPlot } from './hooks'\nimport { svgDefaultProps } from './props'\nimport { ScatterPlotAnnotations } from './ScatterPlotAnnotations'\nimport { Nodes } from './Nodes'\nimport { Mesh } from './Mesh'\nimport { ScatterPlotDatum, ScatterPlotLayerId, ScatterPlotSvgProps } from './types'\n\ntype InnerScatterPlotProps<RawDatum extends ScatterPlotDatum> = Omit<\n    ScatterPlotSvgProps<RawDatum>,\n    'animate' | 'motionConfig' | 'renderWrapper' | 'theme'\n>\n\nconst InnerScatterPlot = <RawDatum extends ScatterPlotDatum>({\n    data,\n    xScale: xScaleSpec = svgDefaultProps.xScale,\n    xFormat,\n    yScale: yScaleSpec = svgDefaultProps.yScale,\n    yFormat,\n    width,\n    height,\n    margin: partialMargin,\n    layers = svgDefaultProps.layers,\n    colors = svgDefaultProps.colors,\n    blendMode = svgDefaultProps.blendMode,\n    nodeId = svgDefaultProps.nodeId,\n    nodeSize = svgDefaultProps.nodeSize,\n    nodeComponent = svgDefaultProps.nodeComponent,\n    enableGridX = svgDefaultProps.enableGridX,\n    enableGridY = svgDefaultProps.enableGridY,\n    gridXValues,\n    gridYValues,\n    axisTop,\n    axisRight,\n    axisBottom = svgDefaultProps.axisBottom,\n    axisLeft = svgDefaultProps.axisLeft,\n    annotations = svgDefaultProps.annotations,\n    isInteractive = svgDefaultProps.isInteractive,\n    useMesh = svgDefaultProps.useMesh,\n    debugMesh = svgDefaultProps.debugMesh,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = svgDefaultProps.tooltip,\n    markers = svgDefaultProps.markers,\n    legends = svgDefaultProps.legends,\n    role = svgDefaultProps.role,\n    ariaLabel,\n    ariaLabelledBy,\n    ariaDescribedBy,\n}: InnerScatterPlotProps<RawDatum>) => {\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { xScale, yScale, nodes, legendData } = useScatterPlot<RawDatum>({\n        data,\n        xScaleSpec,\n        xFormat,\n        yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        nodeId,\n        nodeSize,\n        colors,\n    })\n\n    const customLayerProps = useMemo(\n        () => ({\n            xScale,\n            yScale,\n            nodes,\n            margin,\n            innerWidth,\n            innerHeight,\n            outerWidth,\n            outerHeight,\n        }),\n        [xScale, yScale, nodes, margin, innerWidth, innerHeight, outerWidth, outerHeight]\n    )\n\n    const layerById: Record<ScatterPlotLayerId, ReactNode> = {\n        grid: null,\n        axes: null,\n        nodes: null,\n        markers: null,\n        mesh: null,\n        annotations: null,\n        legends: null,\n    }\n\n    if (layers.includes('grid')) {\n        layerById.grid = (\n            <Grid\n                key=\"grid\"\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        )\n    }\n\n    if (layers.includes('axes')) {\n        layerById.axes = (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        )\n    }\n\n    if (layers.includes('nodes')) {\n        layerById.nodes = (\n            <Nodes<RawDatum>\n                key=\"nodes\"\n                nodes={nodes}\n                nodeComponent={nodeComponent}\n                isInteractive={isInteractive}\n                tooltip={tooltip}\n                blendMode={blendMode}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n            />\n        )\n    }\n\n    if (layers.includes('markers')) {\n        layerById.markers = (\n            <CartesianMarkers<RawDatum['x'], RawDatum['y']>\n                key=\"markers\"\n                markers={markers}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale as (value: RawDatum['x']) => number}\n                yScale={yScale as (value: RawDatum['y']) => number}\n            />\n        )\n    }\n\n    if (layers.includes('mesh') && isInteractive && useMesh) {\n        layerById.mesh = (\n            <Mesh<RawDatum>\n                key=\"mesh\"\n                nodes={nodes}\n                width={innerWidth}\n                height={innerHeight}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                tooltip={tooltip}\n                debug={debugMesh}\n            />\n        )\n    }\n\n    if (layers.includes('annotations')) {\n        layerById.annotations = (\n            <ScatterPlotAnnotations<RawDatum>\n                key=\"annotations\"\n                nodes={nodes}\n                annotations={annotations}\n            />\n        )\n    }\n\n    if (layers.includes('legends')) {\n        layerById.legends = legends.map((legend, i) => (\n            <BoxLegendSvg\n                key={i}\n                {...legend}\n                containerWidth={innerWidth}\n                containerHeight={innerHeight}\n                data={legendData}\n            />\n        ))\n    }\n\n    return (\n        <SvgWrapper\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n            ariaLabel={ariaLabel}\n            ariaLabelledBy={ariaLabelledBy}\n            ariaDescribedBy={ariaDescribedBy}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'string' && layerById[layer] !== undefined) {\n                    return layerById[layer]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, customLayerProps)}</Fragment>\n                }\n\n                throw new Error(`Unknown layer (${layer})`)\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const ScatterPlot = <RawDatum extends ScatterPlotDatum>({\n    isInteractive = svgDefaultProps.isInteractive,\n    animate = svgDefaultProps.animate,\n    motionConfig = svgDefaultProps.motionConfig,\n    theme,\n    renderWrapper,\n    ...otherProps\n}: ScatterPlotSvgProps<RawDatum>) => (\n    <Container\n        {...{\n            animate,\n            isInteractive,\n            motionConfig,\n            renderWrapper,\n            theme,\n        }}\n    >\n        <InnerScatterPlot<RawDatum> isInteractive={isInteractive} {...otherProps} />\n    </Container>\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { ScatterPlot } from './ScatterPlot'\nimport { ScatterPlotDatum, ScatterPlotSvgProps } from './types'\n\nexport const ResponsiveScatterPlot = <RawDatum extends ScatterPlotDatum>(\n    props: Omit<ScatterPlotSvgProps<RawDatum>, 'width' | 'height'>\n) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <ScatterPlot<RawDatum> width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n","import {\n    ForwardedRef,\n    createElement,\n    forwardRef,\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n    useState,\n    MouseEvent,\n} from 'react'\nimport { Container, useDimensions, useTheme, getRelativeCursor, isCursorInRect } from '@nivo/core'\nimport { renderAnnotationsToCanvas } from '@nivo/annotations'\nimport { CanvasAxisProps, renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useVoronoiMesh, renderVoronoiToCanvas, renderVoronoiCellToCanvas } from '@nivo/voronoi'\nimport { canvasDefaultProps, svgDefaultProps } from './props'\nimport { useScatterPlot, useScatterPlotAnnotations } from './hooks'\nimport { ScatterPlotCanvasProps, ScatterPlotDatum, ScatterPlotNodeData } from './types'\n\ntype InnerScatterPlotCanvasProps<RawDatum extends ScatterPlotDatum> = Omit<\n    ScatterPlotCanvasProps<RawDatum>,\n    'renderWrapper' | 'theme'\n> & {\n    canvasRef: ForwardedRef<HTMLCanvasElement>\n}\n\nconst InnerScatterPlotCanvas = <RawDatum extends ScatterPlotDatum>({\n    data,\n    xScale: xScaleSpec = canvasDefaultProps.xScale,\n    xFormat,\n    yScale: yScaleSpec = canvasDefaultProps.yScale,\n    yFormat,\n    width,\n    height,\n    margin: partialMargin,\n    pixelRatio = canvasDefaultProps.pixelRatio,\n    layers = canvasDefaultProps.layers,\n    colors = canvasDefaultProps.colors,\n    nodeId = svgDefaultProps.nodeId,\n    nodeSize = canvasDefaultProps.nodeSize,\n    renderNode = canvasDefaultProps.renderNode,\n    enableGridX = canvasDefaultProps.enableGridX,\n    gridXValues,\n    enableGridY = canvasDefaultProps.enableGridY,\n    gridYValues,\n    axisTop,\n    axisRight,\n    axisBottom = canvasDefaultProps.axisBottom,\n    axisLeft = canvasDefaultProps.axisLeft,\n    annotations = canvasDefaultProps.annotations,\n    isInteractive = canvasDefaultProps.isInteractive,\n    debugMesh = canvasDefaultProps.debugMesh,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip = canvasDefaultProps.tooltip,\n    legends = canvasDefaultProps.legends,\n    canvasRef,\n}: InnerScatterPlotCanvasProps<RawDatum>) => {\n    const canvasEl = useRef<HTMLCanvasElement | null>(null)\n    const theme = useTheme()\n    const [currentNode, setCurrentNode] = useState<ScatterPlotNodeData<RawDatum> | null>(null)\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { xScale, yScale, nodes, legendData } = useScatterPlot<RawDatum>({\n        data,\n        xScaleSpec,\n        xFormat,\n        yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        nodeId,\n        nodeSize,\n        colors,\n    })\n\n    const boundAnnotations = useScatterPlotAnnotations<RawDatum>(nodes, annotations)\n\n    const { delaunay, voronoi } = useVoronoiMesh({\n        points: nodes,\n        width: innerWidth,\n        height: innerHeight,\n        debug: debugMesh,\n    })\n\n    const customLayerProps = useMemo(\n        () => ({\n            xScale,\n            yScale,\n            nodes,\n            margin,\n            innerWidth,\n            innerHeight,\n            outerWidth,\n            outerHeight,\n        }),\n        [xScale, yScale, nodes, margin, innerWidth, innerHeight, outerWidth, outerHeight]\n    )\n\n    useEffect(() => {\n        if (!canvasEl.current) return\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')!\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (layer === 'grid') {\n                ctx.lineWidth = theme.grid.line.strokeWidth as number\n                ctx.strokeStyle = theme.grid.line.stroke as string\n\n                enableGridX &&\n                    renderGridLinesToCanvas<RawDatum['x']>(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: xScale,\n                        axis: 'x',\n                        values: gridXValues,\n                    })\n\n                enableGridY &&\n                    renderGridLinesToCanvas<RawDatum['y']>(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: yScale,\n                        axis: 'y',\n                        values: gridYValues,\n                    })\n            } else if (layer === 'annotations') {\n                renderAnnotationsToCanvas<ScatterPlotNodeData<RawDatum>>(ctx, {\n                    annotations: boundAnnotations as any,\n                    theme,\n                })\n            } else if (layer === 'axes') {\n                renderAxesToCanvas<RawDatum['x'], RawDatum['y']>(ctx, {\n                    xScale: xScale,\n                    yScale: yScale,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop as CanvasAxisProps<RawDatum['x']>,\n                    right: axisRight as CanvasAxisProps<RawDatum['y']>,\n                    bottom: axisBottom as CanvasAxisProps<RawDatum['x']>,\n                    left: axisLeft as CanvasAxisProps<RawDatum['y']>,\n                    theme,\n                })\n            } else if (layer === 'nodes') {\n                nodes.forEach(node => {\n                    renderNode(ctx, node)\n                })\n            } else if (layer === 'mesh') {\n                if (debugMesh) {\n                    renderVoronoiToCanvas(ctx, voronoi!)\n                    if (currentNode) {\n                        renderVoronoiCellToCanvas(ctx, voronoi!, currentNode.index)\n                    }\n                }\n            } else if (layer === 'legends') {\n                legends.forEach(legend => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data: legendData,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            } else if (typeof layer === 'function') {\n                layer(ctx, customLayerProps)\n            } else {\n                throw new Error(`Invalid layer: ${layer}`)\n            }\n        })\n    }, [\n        canvasEl,\n        innerWidth,\n        innerHeight,\n        outerWidth,\n        outerHeight,\n        margin.top,\n        margin.left,\n        pixelRatio,\n        renderNode,\n        layers,\n        customLayerProps,\n        theme,\n        xScale,\n        yScale,\n        nodes,\n        enableGridX,\n        enableGridY,\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        legends,\n        legendData,\n        debugMesh,\n        voronoi,\n        currentNode,\n        boundAnnotations,\n    ])\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const getNodeFromMouseEvent = useCallback(\n        (event: MouseEvent<HTMLCanvasElement>) => {\n            const [x, y] = getRelativeCursor(canvasEl.current!, event)\n            if (!isCursorInRect(margin.left, margin.top, innerWidth, innerHeight, x, y)) return null\n\n            const nodeIndex = delaunay.find(x - margin.left, y - margin.top)\n            return nodes[nodeIndex]\n        },\n        [canvasEl, margin, innerWidth, innerHeight, delaunay]\n    )\n\n    const handleMouseHover = useCallback(\n        (event: MouseEvent<HTMLCanvasElement>) => {\n            const node = getNodeFromMouseEvent(event)\n            setCurrentNode(node)\n\n            if (node) {\n                showTooltipFromEvent(createElement(tooltip, { node }), event)\n                if (currentNode && currentNode.id !== node.id) {\n                    onMouseLeave && onMouseLeave(currentNode, event)\n                    onMouseEnter && onMouseEnter(node, event)\n                }\n                if (!currentNode) {\n                    onMouseEnter && onMouseEnter(node, event)\n                }\n                onMouseMove && onMouseMove(node, event)\n            } else {\n                hideTooltip()\n                currentNode && onMouseLeave && onMouseLeave(currentNode, event)\n            }\n        },\n        [\n            getNodeFromMouseEvent,\n            currentNode,\n            setCurrentNode,\n            showTooltipFromEvent,\n            hideTooltip,\n            tooltip,\n            onMouseEnter,\n            onMouseMove,\n            onMouseLeave,\n        ]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: MouseEvent<HTMLCanvasElement>) => {\n            hideTooltip()\n            setCurrentNode(null)\n            currentNode && onMouseLeave && onMouseLeave(currentNode, event)\n        },\n        [hideTooltip, currentNode, setCurrentNode, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        (event: MouseEvent<HTMLCanvasElement>) => {\n            if (onClick) {\n                const node = getNodeFromMouseEvent(event)\n                node && onClick(node, event)\n            }\n        },\n        [getNodeFromMouseEvent, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvas => {\n                canvasEl.current = canvas\n                if (canvasRef && 'current' in canvasRef) canvasRef.current = canvas\n            }}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nexport const ScatterPlotCanvas = forwardRef(\n    <RawDatum extends ScatterPlotDatum>(\n        { isInteractive, renderWrapper, theme, ...props }: ScatterPlotCanvasProps<RawDatum>,\n        ref: ForwardedRef<HTMLCanvasElement>\n    ) => (\n        <Container {...{ isInteractive, renderWrapper, theme }} animate={false}>\n            <InnerScatterPlotCanvas<RawDatum> {...props} canvasRef={ref} />\n        </Container>\n    )\n)\n","import { ResponsiveWrapper } from '@nivo/core'\nimport { ForwardedRef, forwardRef } from 'react'\n\nimport { ScatterPlotCanvas } from './ScatterPlotCanvas'\nimport { ScatterPlotCanvasProps, ScatterPlotDatum } from './types'\n\nexport const ResponsiveScatterPlotCanvas = forwardRef(function ResponsiveScatterPlotCanvas<\n    RawDatum extends ScatterPlotDatum\n>(\n    props: Omit<ScatterPlotCanvasProps<RawDatum>, 'width' | 'height'>,\n    ref: ForwardedRef<HTMLCanvasElement>\n) {\n    return (\n        <ResponsiveWrapper>\n            {({ width, height }) => (\n                <ScatterPlotCanvas\n                    width={width}\n                    height={height}\n                    {...(props as Omit<\n                        ScatterPlotCanvasProps<ScatterPlotDatum>,\n                        'height' | 'width'\n                    >)}\n                    ref={ref}\n                />\n            )}\n        </ResponsiveWrapper>\n    )\n})\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}